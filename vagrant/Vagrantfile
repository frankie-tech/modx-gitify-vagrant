# -*- mode: ruby -*-
# vi: set ft=ruby :

project_name = 'project'

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"
  config.ssh.forward_agent = true

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder File.join("..","project"), "/var/www/project"

  config.push.define "test", strategy: "local-exec" do |push|
    if(Gem.win_platform?)
      push.script = "./push-test.bat"
    else
      push.inline = "./push.sh test #{project_name}"
    end
  end

  config.push.define "acceptance", strategy: "local-exec" do |push|
    if(Gem.win_platform?)
      push.script = "./push-acceptance.bat"
    else
      push.inline = "./push.sh acceptance #{project_name}"
    end
  end

  # Check vagrant-folder for Windows file endings
  # We do this everytime, as a precaution
  config.vm.provision "vagrant line endings", run: 'always', type: "shell" do |r|
	r.inline = "echo \"Checking vagrant-folder for Windows Line Endings...\"; t=`grep -IUlr $'\r' /vagrant/`; if [[ ! -z $t ]]; then echo -e \"\e[41mWindows file endings found!\"; echo $t; echo -e \"\033[0m\"; fi"
  end

  # Check project-folder for Windows file endings
  # This takes a long time, so only do it for bash-scripts
  config.vm.provision "project line endings", run: 'always', type: "shell" do |r|
	r.inline = "echo \"Checking bash scripts in the project-folder for Windows Line Endings...\"; t=`grep -IUlr $'\r' --include \"*.sh\" /var/www/project/`; if [[ ! -z $t ]]; then echo -e \"\e[41mWindows file endings found!\"; echo $t; echo -e \"\033[0m\"; fi"
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "bootstrap", type: "shell" do |s|
    s.inline = "sudo apt-get update"
  end

  config.vm.provision :puppet do |puppet|
    puppet.manifests_path = "puppet/manifests/"
    puppet.module_path = "puppet/modules/"
    puppet.manifest_file = "main.pp"
  end
end
